;; Please be -*- emacs-lisp -*-

(when (file-exists-p "/usr/share/emacs/site-lisp/site-gentoo.el")
  (load "/usr/share/emacs/site-lisp/site-gentoo"))

(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(setq default-buffer-file-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq file-name-coding-system 'utf-8)
(set-selection-coding-system 'compound-text-with-extensions)

;; remove vc peskiness while editing .emacs file
(setq vc-follow-symlinks nil)

(setq line-number-mode t)
(setq column-number-mode t)
(setq auto-fill-default t)
(setq-default indent-tabs-mode t) ; default save as tabs mode
(setq visible-bell t)
;;(setq require-final-newline t)
;;(setq next-line-extends-end-of-buffer nil)
;;(setq debug-on-error t)
(fset 'yes-or-no-p 'y-or-n-p)
;(temp-buffer-resize-mode t)         ; Size the tempbuffer according to contents.
(resize-minibuffer-mode)            ; Size the minibuffer according to contents.
;(setq display-time-day-and-date t)
;(display-time)

;Enable opposite bracket/paranthesis highlighting
(require 'paren)
(show-paren-mode t)
(setq blink-matching-paren nil)

;; Enable font lock (colours) for all modes that support it:
(require 'font-lock)
(setq-default font-lock-maximum-decoration t)
(global-font-lock-mode t)

;; make the backup gods obey ME! no more ~ sprinkles all over the place
(setq version-control nil)
(add-to-list 'backup-directory-alist
	     (cons "." "~/.emacs.d/backups/"))

(require 'compile)
;
; ruby mode
; 

(autoload 'ruby-mode "ruby-mode" nil t)

(defun ruby-eval-buffer () (interactive)
   "Evaluate the buffer with ruby."
   (shell-command-on-region (point-min) (point-max) "ruby -w "))

(defun my-ruby-mode-hook ()
  (make-variable-buffer-local 'compilation-error-regexp-alist)
  (add-to-list 'compilation-error-regexp-alist
	       '("test[a-zA-Z0-9_]*([A-Z][a-zA-Z0-9_]*) \\[\\(.*\\):\\([0-9]+\\)\\]:" 1 2))
  (add-to-list 'compilation-error-regexp-alist
	       '("\\(.*?\\)\\([0-9A-Za-z_./\:-]+\\.rb\\):\\([0-9]+\\)" 2 3))
  (make-variable-buffer-local 'compile-command)
  (setq compile-command (concat "ruby -w " (buffer-file-name) " "))
  (local-set-key "\C-cr" 'ruby-eval-buffer)

  (c-add-style
   "ruby"
   '("bsd"
     (c-basic-offset . 4)
     (c-offsets-alist
      (case-label . 2)
      (label . 2)
      (statement-case-intro . 2)
      )))
  (inf-ruby-keys)
  ;; from: http://shylock.uw.hu/Emacs/ruby-electric.el
  (if (require 'ruby-electric)
      (ruby-electric-mode))
  (abbrev-mode 1)
  (define-key ruby-mode-map "\C-m" 'ruby-reindent-then-newline-and-indent)
  (define-key ruby-mode-map "\C-j" 'newline)
)

(add-hook 'ruby-mode-hook 'my-ruby-mode-hook)

(setq interpreter-mode-alist 
      (append '(("ruby" . ruby-mode)) interpreter-mode-alist))
(autoload 'run-ruby "inf-ruby" "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby" "Set local key defs for inf-ruby in ruby-mode")

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; eRuby
(require 'mmm-mode)
(require 'mmm-auto)
(setq mmm-global-mode 'maybe)
;(setq mmm-submode-decoration-level 0)
;(set-face-background 'mmm-output-submode-face  "LightGrey")
;(set-face-background 'mmm-code-submode-face    "MediumSlateBlue")
;(set-face-background 'mmm-comment-submode-face "DarkOliveGreen")
(mmm-add-classes
 '((eruby
    :submode ruby-mode
    :match-face (("<%#" . mmm-comment-submode-face)
		 ("<%=" . mmm-output-submode-face)
		 ("<%"  . mmm-code-submode-face))
    :front "<%[#=]?"
    :back  "-?%>"
    :insert ((?% erb-code       nil @ "<%"  @ " " _ " " @ "%>" @)
             (?# erb-comment    nil @ "<%#" @ " " _ " " @ "%>" @)
             (?= erb-expression nil @ "<%=" @ " " _ " " @ "%>" @))
    )))
(add-hook 'html-mode-hook
          (lambda ()
            (setq mmm-classes '(erb-code))
            (mmm-mode-on)))
(add-to-list 'auto-mode-alist '("\\.rhtml$" . html-mode))
(add-to-list 'auto-mode-alist '("\\.rhtml$" . html-mode))

;;
;; set c/c++ indent width and compile modes
;;
(setq c-basic-offset 2)
(add-hook 'c-mode-hook 
          (function (lambda ()
                      (c-set-style "K&R")
                      (setq indent-tabs-mode nil)
                      (local-set-key "\C-cc" 'compile))))

;; java

;; ISWITCH

; necessary support function for buffer burial
(defun crs-delete-these (delete-these from-this-list)
  "Delete DELETE-THESE FROM-THIS-LIST."
  (cond
   ((car delete-these)
    (if (member (car delete-these) from-this-list)
	(crs-delete-these (cdr delete-these) (delete (car delete-these)
                                                     from-this-list))
      (crs-delete-these (cdr delete-these) from-this-list)))
   (t from-this-list)))

(defun crs-hated-buffers ()
  "List of buffers I never want to see, converted from names to buffers."
  (delete nil
	  (append
	   (mapcar 'get-buffer crs-hated-buffers)
	   (mapcar (lambda (this-buffer)
		     (if (string-match "^ " (buffer-name this-buffer))
			 this-buffer))
		   (buffer-list)))))

; I'm sick of switching buffers only to find KILL right in front of me
(defun crs-bury-buffer (&optional n)
  (interactive)
  (unless n
    (setq n 1))
  (let ((my-buffer-list (crs-delete-these (crs-hated-buffers)
					  (buffer-list (selected-frame)))))
    (switch-to-buffer
     (if (< n 0)
	 (nth (+ (length my-buffer-list) n)
	      my-buffer-list)
       (bury-buffer)
       (nth n my-buffer-list)))))

; this is the list of buffers I never want to see
(defvar crs-hated-buffers
  '("KILL" "*Compile-Log*"))

; might as well use this for both
(setq iswitchb-buffer-ignore (append '("^ " "*Buffer") crs-hated-buffers))

(setq completion-ignored-extensions
      '("~" ".aux" ".a" ".bbl" ".blg" ".dvi" ".elc" ".class"
        ".hc" ".hi" ".log" ".mlc" ".o" ".so" ".toc"))


(setq auto-mode-alist
      (append 
       '(
	 ("\\.C$"         . c++-mode)
	 ("\\.cc$"        . c++-mode)
	 ("\\.[ch]xx|pp$" . c++-mode)
	 ;;("\\.h$"     . c++-mode)
	 ("\\.hh$"        . c++-mode)
         ;; C Bindings
	 ("\\.c$"         . c-mode)
	 ("\\.h$"         . c++-mode)
         
         ("\\.awk"        . awk-mode)
         
         ;; Ruby Bindings
	 ("\\.ruby$"      . ruby-mode)
	 ("\\[Rr]akefile$" . ruby-mode)
	 ("\\.gem$"       . ruby-mode)
	 ("\\.gemspec$"   . ruby-mode)
	 ) auto-mode-alist))


;; Perl Stuff (for the horrible times when I can't use ruby)
(defalias 'perl-mode 'cperl-mode)
(setq cperl-hairy t)

(defun global-trim ()
  "Trim all trailing whitespace in the current buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "[ \t]+$" nil t)
      (replace-match "" t t))))

;; KEYBINDINGS

(global-set-key [(control tab)] 'crs-bury-buffer)
(global-set-key [(control shift tab)]  (lambda () (interactive) (crs-bury-buffer -1)))
(global-set-key "\C-cc" 'compile)
(global-set-key [f5] 'compile)
(global-set-key "\C-cm" 
                (lambda () (interactive) 
                  (switch-to-buffer "Makefile") 
                  (compile "make -k"))) 
(global-set-key "\C-xp" (lambda () (interactive) (other-window -1)))

(global-set-key "\C-xE" 'apply-macro-to-region-lines)

  ;so now Control-c 7 prompts for a Unicode hex code, will then insert the glyph
(global-set-key "\C-c7" 'ucs-insert)

(global-set-key [f6] 'svn-status)
(global-set-key "\C-c1" 'svn-status)

(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)

; (setq iswitchb-case nil) ; completions are case sensitive.
(if (fboundp 'iswitchb-default-keybindings)
    (iswitchb-default-keybindings)
  (iswitchb-mode))


; Turn off Emacs 21 toolbar
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

(if (load "mwheel" t)
    (mwheel-install))

(setq tramp-default-method "ssh")

(set-frame-width (selected-frame) 140)
(set-frame-height (selected-frame) 70)

; (server-start)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(compilation-ask-about-save nil)
 '(compilation-read-command t)
 '(compilation-window-height 10)
 '(quack-programs (quote ("mzscheme -M eopl" "bigloo" "csi" "csi -hygienic" "gosh" "gsi" "guile" "kawa" "mit-scheme" "mred -z" "mzscheme" "mzscheme -M errortrace" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi")))
 '(quack-tabs-are-evil-p t))

(defun autocompile nil
  "compile itself if ~/.emacs"
  (interactive)
  (require 'bytecomp)
  (if (string= (buffer-file-name) 
	       (expand-file-name (concat default-directory ".emacs")))
      (byte-compile-file (buffer-file-name))))

(add-hook 'after-save-hook 'autocompile)
