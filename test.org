Because emacs has the kitchen sink;

#+BEGIN_SRC elisp
(lunar-phases)
#+END_SRC

#+RESULTS:
: Computing phases of the moon...done

#+BEGIN_SRC sh
  echo '{"text": "foobar", "username": "test", "channel": "@charles"}' |
      curl -X POST -H "Content-type: application/json" $SLACK_WEBHOOK --data @-
#+END_SRC

#+RESULTS:
: ok

#+BEGIN_SRC http :pretty
GET https://api.github.com/repos/zweifisch/ob-http/languages
Accept: application/vnd.github.moondragon+json
#+END_SRC

#+RESULTS:
: {
:   "Emacs Lisp": 13054,
:   "Shell": 139
: }

#+BEGIN_SRC http :file tmp/dgtized.json
GET https://api.github.com/users/dgtized
Accept: application/vnd.github.v3+json
#+END_SRC

#+RESULTS:
[[file:tmp/dgtized.json]]

#+BEGIN_SRC http :file tmp/me.jpeg
GET https://avatars.githubusercontent.com/u/6784?v=3
Accept: image/jpeg
#+END_SRC

#+RESULTS:
[[file:tmp/me.jpeg]]


From: http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html

#+BEGIN_SRC gnuplot :exports code :file tmp/plot.png
  reset
  set title "Putting it All Together"

  set xlabel "X"
  set xrange [-8:8]
  set xtics -8,2,8

  set ylabel "Y"
  set yrange [-20:70]
  set ytics -20,10,70

  f(x) = x**2
  g(x) = x**3
  h(x) = 10*sqrt(abs(x))

  plot f(x) w lp lw 1, g(x) w p lw 2, h(x) w l lw 3
#+END_SRC

#+RESULTS:
[[file:tmp/plot.png]]

#+BEGIN_SRC dot :file tmp/dot.png
  digraph {
    a -> b
    b -> c
    c -> a
    subgraph {
      rank=same
      a b c
      a [ shape=diamond ]
      b [ color=blue ]
      c [ style=filled, fillcolor=green ]
    }
    d -> a [ arrowhead=box, color=darkgreen, label="on_stuff" ]
    d -> d [ label="self" ]
  }
#+END_SRC

#+RESULTS:
[[file:tmp/dot.png]]

See http://plantuml.com/PlantUML_Language_Reference_Guide.pdf

#+BEGIN_SRC plantuml :file tmp/tryout.png
actor User
participant WebServer as W
participant Service as S

User -> W: initiate request
activate W

W -> S: initiate work
S --> W: completed

deactivate W

W --> User: furnish response
#+END_SRC

#+RESULTS:
[[file:tmp/tryout.png]]

#+BEGIN_SRC plantuml :file tmp/class_diagram.png
@startuml 
abstract Top {
  +foo()
  +bar()
  __ class methods __
  +gazorbazorb(blah)
}
class Child {
  +foo()
  -private_foo(arg)
}

class Delegate {
}

Top <|-- Child
Top -right..> Delegate

@enduml
#+END_SRC

#+RESULTS:
[[file:tmp/class_diagram.png]]

#+PLOT: title:"Foo" ind:1 deps:(2) type:2d with:histograms set:"yrange [0:]" file:tmp/plot2.png
| A   | B | C |
|-----+---+---|
| foo | 1 | 2 |
| bar | 2 | 6 |
| baz | 3 | 9 |


** Awk

For more examples see: https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-awk.org.html

#+name: awk-input
| a | 1 |
| b | 2 |
| c | 3 |

#+begin_src awk :stdin awk-input
/b/ { print $2 }
#+end_src

#+RESULTS:
: 2
